: # *-*-perl-*-*
eval 'exec perl -w -S  $0 ${1+"$@"}' 
  if 0;  # if running under some shell

# Converts literal haskell source code into something haddock-friendlier.
# Any latex code that begins with \paragraph{} or \fnparam{} is assumed
# to be a function description

use strict;

my $ignore=0;
my $enumerate_count=0;
my $itemize_count=0;
my $description_count=0;
my $in_code=0;
my $in_hcomment=0;

while (<STDIN>) {
  s/^%.*//;
  s/^#.*//;
  s/\\((sub)*section){(.*)}/$3/;
 
  if (s/\\(paragraph|fnlabel){(.*)}/| '$2'/) {
    $in_hcomment=1;
  }

  if (s/\\begin{code}//) {
    $in_hcomment=0;
    $in_code=1;
  } 

  $in_code=0 if s/\\end{code}//;
  $itemize_count++ if (s/\\begin{itemize}//);
  $itemize_count-- if (s/\\end{itemize}//);
  $enumerate_count++ if (s/\\begin{enumerate}//);
  $enumerate_count-- if (s/\\end{enumerate}//);
  $description_count++ if (s/\\begin{description}//);
  $description_count-- if (s/\\end{description}//);

  if (not $in_code) {
    s/\\chapter{(.*)}/$1/;
    s/\\label{(.*)}/#$1#/;
    # escape slashes
    s/\//\\\//g;
    # kill any unknown latex
    s/\\(.*){(.*)}/$2/;

    if ($itemize_count > 0) {
      s/\\item/ * /;
    }
    if ($enumerate_count > 0) {
      s/\\item/ 1. /;
    }
    if ($description_count > 0) {
      s/\\item\[(.*?)\]/\[\@$1\@\] /;
    }

    s/\\verb(.)(.*?)\1/\@$2\@/g;
    s/\$(.*?)\$/\@$1\@/g;

  }

  if (/^\\ignore{/) {
    $ignore=1;
  } elsif ($ignore) {
    $ignore=0 if (/^}/);
  } elsif ($in_hcomment) {
    print "-- $_";
  } elsif ($in_code) {
    print; 
  }
}

# vim: syntax=perl:
