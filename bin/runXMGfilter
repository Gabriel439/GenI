#!/usr/bin/env perl

# ----------------------------------------------------------------------  
# What's this?
#
# An alternative to GenI's runXMGselector - it acts as a filter by
# using the GenI lexical selection to produce and compile the 
# metagrammar valuations list.  The purpose of this script is help
# the grammar hacker avoid recompiling the entire XMG metagrammar
# everytime she makes an edit.  Only the relevant subset is compiled.
# ----------------------------------------------------------------------  
# How do I use it?
#
# Run GenI like so:
#   xmgGeni --selectcmd=runXMGfilter.pl\
#    -m somedirectory/filenameyouwant.rec\
#    -l youlexicon.lex\
#    -s testsuite
#
# Note: 
# 1. we assume that your grammar has the same name as your
#    .rec file, but with an .mg extension
# 2. you need to have an actual working XMG metagrammar 
#    all this script does is produce a list XMG values
# ----------------------------------------------------------------------  

use strict;
use File::Basename;

# command line arguments
if ($#ARGV != 0) {
  printf STDERR "usage: runXMGfilter grammar_file\n";
  exit 1;
}
# infer the GRAMMAR_DIR from the grammar_file
my $INPUT_REC=$ARGV[0];
my $GRAMMAR_DIR=dirname($INPUT_REC);

my $INPUT_MG_BASE=basename($INPUT_REC,".rec").".mg";
my $INPUT_MG=$GRAMMAR_DIR."/".$INPUT_MG_BASE;

my $TMP_FILTERED_FILE=$GRAMMAR_DIR."/tmp-filtered-".$INPUT_MG_BASE;
my $OLD_FILTERED_FILE=$GRAMMAR_DIR."/filtered-".$INPUT_MG_BASE;

# ----------------------------------------------------------------------
# creating the tmp .mg
# ----------------------------------------------------------------------

# print out the stub contents
open OUTPUT_MG, ">$TMP_FILTERED_FILE";
open INPUT_MG, $INPUT_MG;
while (<INPUT_MG>) { 
  my $line = $_;
  if (/^include (.*?)\s*$/) {
    my $included  = $GRAMMAR_DIR."/".$1;
    my $has_value = 0;
    # first: does the file have values?
    open TMP, $included;
    while (<TMP>) { 
      if (/(^value)/) {
        $has_value = 1;
        last;
      }
    }
    close TMP;
    # second: if it does, cat it, but comment out the values
    if ($has_value) {
      open TMP, $included;
      while (<TMP>) { 
        s/^(value)/%$1/;
        print OUTPUT_MG;
      }
      close TMP;
    } else {
      printf OUTPUT_MG $line;
    }
  } else {
    # print any other line you see
    print OUTPUT_MG; 
  }
}
close INPUT_MG;
# detect the values
my @values = ();
while (<STDIN>) {
  print FIL;
  chomp;
  if (/family:([[:alpha:][:digit:]-_]*)/) {
    my $family = $1;
    push @values, "value $family\n";
  }
}
# remove duplicate entries
my %seen = ();
my @uniq_values = grep { ! $seen{$_} ++ } @values;
# print out the values
foreach my $v (@uniq_values) { print OUTPUT_MG $v; }
close OUTPUT_MG;

# ----------------------------------------------------------------------
# finalising the results
# ----------------------------------------------------------------------

# if the tmp file is any different from the old one, delete the old one
if (-e $OLD_FILTERED_FILE) {
  my $the_diff=`diff $OLD_FILTERED_FILE $TMP_FILTERED_FILE`;
  unlink $OLD_FILTERED_FILE if ($the_diff ne "");
}

# if the old file (still) exists, remove the new file because it's identical
# otherwise, rename the tmp file to make it official
if (-e $OLD_FILTERED_FILE) {
  printf STDERR "the tmp file is identical; tossing\n";
  unlink $TMP_FILTERED_FILE;
} else {
  printf STDERR "the tmp file is new; renaming\n";
  rename $TMP_FILTERED_FILE, $OLD_FILTERED_FILE;
} 

# print some non-results for GenI
printf "%% runXMGfilter never returns results\n";
printf "%% see $TMP_FILTERED_FILE\n";

# *-*-perl-*-*
# vim: syntax=perl
